const mineflayer = require('mineflayer');
const FlayerCaptcha = require('./FlayerCaptcha');
const fs = require('fs');
const crypto = require('crypto');
const archiver = require('archiver');
const fetch = require('node-fetch');
const http = require('http');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
const botOptions = {
  host: 'mc.angelmine.ru',
  port: 25565,
  username: 'Joni91',
  version: '1.16.5'
};

let bot;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
function generateFileName() {
  const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  const length = Math.floor(Math.random() * (10 - 5 + 1)) + 5;
  let name = '';
  for (let i = 0; i < length; i++) {
    name += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return name + '.png';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤ –∏ —Ñ–∞–π–ª–æ–≤ —Ä–∞–∑–º–µ—Ä–æ–º 4 –∫–ë –∏–ª–∏ –º–µ–Ω—å—à–µ
function cleanCaptchasFolder() {
  const folderPath = './captchas';
  const fileHashes = new Set();

  if (!fs.existsSync(folderPath)) {
    console.log('üõ†Ô∏è –ü–∞–ø–∫–∞ captchas –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–Ω–∏–µ...');
    fs.mkdirSync(folderPath);
    return;
  }

  const files = fs.readdirSync(folderPath);

  for (const file of files) {
    const filePath = `${folderPath}/${file}`;
    const fileData = fs.readFileSync(filePath);

    // –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    const fileHash = crypto.createHash('md5').update(fileData).digest('hex');
    if (fileHashes.has(fileHash)) {
      fs.unlinkSync(filePath);
      console.log(`üóëÔ∏è –£–¥–∞–ª—ë–Ω –¥—É–±–ª–∏–∫–∞—Ç: ${file}`);
    } else {
      fileHashes.add(fileHash);
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Ä–∞–∑–º–µ—Ä–æ–º 4 –∫–ë –∏–ª–∏ –º–µ–Ω—å—à–µ
  for (const file of files) {
    const filePath = `${folderPath}/${file}`;
    try {
      const stats = fs.statSync(filePath);
      const fileSizeInKB = stats.size / 1024; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–∞–∑–º–µ—Ä –≤ –∫–∏–ª–æ–±–∞–π—Ç—ã

      if (fileSizeInKB <= 4) {
        fs.unlinkSync(filePath);
        console.log(`üóëÔ∏è –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º ${fileSizeInKB.toFixed(2)} –∫–ë: ${file}`);
      }
    } catch (err) {
      console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ ${file}: ${err.message}`);
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏
function archiveFolder(folderPath, outputPath) {
  return new Promise((resolve, reject) => {
    const output = fs.createWriteStream(outputPath);
    const archive = archiver('zip', { zlib: { level: 9 } });

    output.on('close', () => {
      console.log(`üì¶ –ü–∞–ø–∫–∞ ${folderPath} –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤ ${outputPath}`);
      resolve();
    });

    archive.on('error', (err) => {
      console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–∏: ${err.message}`);
      reject(err);
    });

    archive.pipe(output);
    archive.directory(folderPath, false);
    archive.finalize();
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ Dropbox
async function deleteExistingFileOnDropbox(fileName) {
  const token = fs.readFileSync('./dropbox_token.txt', 'utf-8').trim();
  const listFolderUrl = 'https://api.dropboxapi.com/2/files/list_folder';
  const deleteFileUrl = 'https://api.dropboxapi.com/2/files/delete_v2';

  try {
    // –®–∞–≥ 1: –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ Dropbox
    const listResponse = await fetch(listFolderUrl, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ path: '' }) // –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞
    });

    const listData = await listResponse.json();
    const existingFile = listData.entries.find(file => file.name === fileName);

    // –®–∞–≥ 2: –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (existingFile) {
      const deleteResponse = await fetch(deleteFileUrl, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ path: existingFile.path_lower })
      });

      if (deleteResponse.ok) {
        console.log(`üóëÔ∏è –§–∞–π–ª ${fileName} —É–¥–∞–ª—ë–Ω —Å Dropbox`);
      } else {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${await deleteResponse.text()}`);
      }
    }
  } catch (err) {
    console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –Ω–∞ Dropbox: ${err.message}`);
  }
}

// –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ Dropbox
async function uploadToDropbox(filePath) {
  const token = fs.readFileSync('./dropbox_token.txt', 'utf-8').trim();
  const uploadUrl = 'https://content.dropboxapi.com/2/files/upload';

  const fileData = fs.readFileSync(filePath);
  const fileName = filePath.split('/').pop();

  try {
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
    await deleteExistingFileOnDropbox(fileName);

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    const uploadResponse = await fetch(uploadUrl, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Dropbox-API-Arg': JSON.stringify({
          path: `/${fileName}`,
          mode: 'add',
          autorename: false, // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Ç–æ—á–Ω—É—é –∑–∞–º–µ–Ω—É
          mute: false
        }),
        'Content-Type': 'application/octet-stream'
      },
      body: fileData
    });

    if (uploadResponse.ok) {
      console.log(`‚úÖ –§–∞–π–ª ${fileName} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ Dropbox`);
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ Dropbox: ${await uploadResponse.text()}`);
    }
  } catch (err) {
    console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ Dropbox: ${err.message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
function createBot() {
  bot = mineflayer.createBot(botOptions);

  const captcha = new FlayerCaptcha(bot);
  captcha.on('success', async (image) => {
    const fileName = generateFileName();
    const filePath = `./captchas/${fileName}`;
    await image.toFile(filePath);
    console.log(`üíæ Captcha —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ ${fileName}`);
    bot.end();
  });

  bot.on('login', () => {
    console.log(`‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫–∞–∫ ${bot.username}`);
  });

  bot.on('chat', (username, message) => {
    console.log(`[${username}] ${message}`);
  });

  bot.on('end', () => {
    console.log('‚ùé –ë–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.');
    setTimeout(() => {
      console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
      createBot();
    }, 2000);
  });

  bot.on('error', (err) => {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${err.message}`);
    setTimeout(() => {
      console.log('‚ùå –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏...');
      createBot();
    }, 2000);
  });
}

// –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É captchas, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!fs.existsSync('./captchas')) {
  fs.mkdirSync('./captchas');
}

// –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
setInterval(async () => {
  console.log('üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ captchas...');
  cleanCaptchasFolder();

  const folderPath = './captchas';
  const archivePath = './captchas.zip';

  try {
    await archiveFolder(folderPath, archivePath);
    await uploadToDropbox(archivePath);
  } catch (err) {
    console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–ø–∫–∏ captchas: ${err.message}`);
  }
}, 60000);

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
createBot();


const PORT = process.env.PORT || 3000; // Render –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è

const server = http.createServer((req, res) => {
  if (req.url === '/status') {
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    res.end('üü¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!\n');
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n');
  }
});

server.listen(PORT, () => {
  console.log(`üåê HTTP-—Å–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç ${PORT}`);
});