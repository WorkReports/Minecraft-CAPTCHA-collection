const mineflayer = require('mineflayer');
const FlayerCaptcha = require('./FlayerCaptcha');
const fs = require('fs');
const crypto = require('crypto');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
const botOptions = {
  host: 'mc.angelmine.ru',
  port: 25565,
  username: 'Joni90',
  version: '1.16.5'
};

let bot;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
function generateFileName() {
  const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  const length = Math.floor(Math.random() * (10 - 5 + 1)) + 5;
  let name = '';
  for (let i = 0; i < length; i++) {
    name += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return name + '.png';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤ –∏ —Ñ–∞–π–ª–æ–≤ —Ä–∞–∑–º–µ—Ä–æ–º 4 –∫–ë –∏–ª–∏ –º–µ–Ω—å—à–µ
function cleanCaptchasFolder() {
  const folderPath = './captchas';
  const fileHashes = new Set();

  if (!fs.existsSync(folderPath)) {
    console.log('üõ†Ô∏è –ü–∞–ø–∫–∞ captchas –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–Ω–∏–µ...');
    fs.mkdirSync(folderPath);
    return;
  }

  const files = fs.readdirSync(folderPath);

  for (const file of files) {
    const filePath = `${folderPath}/${file}`;
    const fileData = fs.readFileSync(filePath);

    // –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    const fileHash = crypto.createHash('md5').update(fileData).digest('hex');
    if (fileHashes.has(fileHash)) {
      fs.unlinkSync(filePath);
      console.log(`üóëÔ∏è –£–¥–∞–ª—ë–Ω –¥—É–±–ª–∏–∫–∞—Ç: ${file}`);
    } else {
      fileHashes.add(fileHash);
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Ä–∞–∑–º–µ—Ä–æ–º 4 –∫–ë –∏–ª–∏ –º–µ–Ω—å—à–µ
  for (const file of files) {
    const filePath = `${folderPath}/${file}`;
    try {
      const stats = fs.statSync(filePath);
      const fileSizeInKB = stats.size / 1024; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–∞–∑–º–µ—Ä –≤ –∫–∏–ª–æ–±–∞–π—Ç—ã

      if (fileSizeInKB <= 4) {
        fs.unlinkSync(filePath);
        console.log(`üóëÔ∏è –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º ${fileSizeInKB.toFixed(2)} –∫–ë: ${file}`);
      }
    } catch (err) {
      console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ ${file}: ${err.message}`);
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
function createBot() {
  bot = mineflayer.createBot(botOptions);

  const captcha = new FlayerCaptcha(bot);
  captcha.on('success', async (image) => {
    const fileName = generateFileName();
    await image.toFile(`./captchas/${fileName}`);
    console.log(`üíæ Captcha —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ ${fileName}`);
    bot.end();
  });

  bot.on('login', () => {
    console.log(`‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫–∞–∫ ${bot.username}`);
  });

  bot.on('chat', (username, message) => {
    console.log(`[${username}] ${message}`);
  });

  bot.on('end', () => {
    console.log('‚ùé –ë–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.');
    setTimeout(() => {
      console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
      createBot();
    }, 2000);
  });

  bot.on('error', (err) => {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${err.message}`);
    setTimeout(() => {
      console.log('‚ùå –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏...');
      createBot();
    }, 2000);
  });
}

// –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É captchas, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!fs.existsSync('./captchas')) {
  fs.mkdirSync('./captchas');
}

// –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–∞–ø–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
setInterval(() => {
  console.log('üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ captchas...');
  cleanCaptchasFolder();
}, 30000);

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
createBot();